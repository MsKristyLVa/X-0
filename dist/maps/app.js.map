{"version":3,"sources":["Board.js","Game.js","Main.js","Status.js"],"names":[],"mappingsdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../app.js","sourcesContent":["class Board {\n    constructor() {\n        this.gameTableElement = document.getElementById('game');\n    }\n\n    init(game, status) {\n        this.game = game;\n        this.status = status;\n    }\n    \n    renderMap() {\n        for (let row = 0; row < 3; row++) {\n            const tr = document.createElement('tr');\n            this.gameTableElement.appendChild(tr);\n            for (let col = 0; col < 3; col++) {\n                let td = document.createElement('td');\n                td.dataset.row = row.toString();\n                td.dataset.col = col.toString();\n                tr.appendChild(td);\n            }\n        }\n    }\n\n    initEventHandlers() {\n        this.gameTableElement.addEventListener('click', event => this.game.cellClickHandler(event));\n    }\n\n    isClickByCell(event) {\n        return event.target.tagName === 'TD';\n    }\n    \n    isCellEmpty(event) {\n        let row = +event.target.dataset.row;\n        let col = +event.target.dataset.col;\n        return this.status.mapValues[row][col] === '';\n    }\n\n    fillCell(event) {\n        let row = +event.target.dataset.row;\n        let col = +event.target.dataset.col;\n        this.status.mapValues[row][col] = this.status.phase;\n        event.target.textContent = this.status.phase;\n    }\n\n    clearBoard() {\n        this.gameTableElement.innerHTML = '';\n    }\n}","class Game {\n    constructor() {\n        this.clickCount = 0;\n        this.clickToFiLlBoard = 9;\n    }\n\n    init(status, board) {\n        this.status = status;\n        this.board = board;\n    }\n\n    cellClickHandler(event) {\n        if (!this.isCorrectClick(event)) {\n            return\n        }\n        this.board.fillCell(event);\n        this.clickCount++\n        if (this.hasWon()) {\n            this.status.setStatusStopped();\n            this.sayWonPhrase();\n            return;\n        }\n        if (this.clickCount === this.clickToFiLlBoard) {\n            this.sayDeatHeatPhrase();\n            return;\n        }\n        this.status.togglePhase();\n    }\n\n    sayDeatHeatPhrase() {\n        let confirmRestart = confirm('Ничья');\n\n        if (confirmRestart) {\n            this.restartGame();\n        }\n    }\n\n    isCorrectClick(event) {\n        return this.status.isStatusPlaying() && this.board.isClickByCell(event) && this.board.isCellEmpty(event);\n    }\n\n    hasWon() {\n        return this.isLineWon({x: 0, y: 0}, {x: 1, y: 0}, {x: 2, y: 0}) ||\n            this.isLineWon({x: 0, y: 1}, {x: 1, y: 1}, {x: 2, y: 1}) ||\n            this.isLineWon({x: 0, y: 2}, {x: 1, y: 2}, {x: 2, y: 2}) ||\n\n            this.isLineWon({x: 0, y: 0}, {x: 0, y: 1}, {x: 0, y: 2}) ||\n            this.isLineWon({x: 1, y: 0}, {x: 1, y: 1}, {x: 1, y: 2}) ||\n            this.isLineWon({x: 2, y: 0}, {x: 2, y: 1}, {x: 2, y: 2}) ||\n\n            this.isLineWon({x: 0, y: 0}, {x: 1, y: 1}, {x: 2, y: 2}) ||\n            this.isLineWon({x: 0, y: 2}, {x: 1, y: 1}, {x: 2, y: 0});\n    }\n\n    isLineWon(a, b, c) {\n        let value = this.status.mapValues[a.y][a.x] + this.status.mapValues[b.y][b.x] + this.status.mapValues[c.y][c.x];\n        return ((value === 'XXX') || (value === '000'));\n    }\n\n    sayWonPhrase() {\n        let figure = this.status.phase === 'X' ? 'Крестики' : 'Нолики';\n        let confirmRestart = confirm(`${figure} выиграли!`);\n\n        if (confirmRestart) {\n            this.restartGame();\n        }\n    }\n\n    restartGame() {\n        this.board.clearBoard();\n        start();\n    }\n}\n\n","window.addEventListener('load', function() {\n    this.start();\n});\n\nfunction start() {\n    const game = new Game();\n    const board = new Board();\n    const status = new Status();\n\n    board.init(game, status);\n    game.init(status, board);\n\n    board.renderMap();\n    board.initEventHandlers();\n}","class Status {\n    constructor() {\n        this.status = 'playing';\n        this.mapValues = [\n            ['', '', ''],\n            ['', '', ''],\n            ['', '', ''],\n        ];\n        this.phase = 'X';\n    }\n\n    isStatusPlaying() {\n        return this.status === 'playing';\n    }\n\n    setStatusStopped() {\n        this.status = 'stopped';\n    }\n\n    togglePhase() {\n        this.phase = this.phase === 'X' ? '0' : 'X';\n    }\n}"]}